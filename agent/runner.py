# agent/runner.py
from __future__ import annotations
import os, json, traceback
from typing import List, Dict, Any, Optional

from agent.llm import tool_spec, make_messages, chat_once
from agent.tools.web_search import search_web
from agent.tools.fetch_page import fetch_page
from memory import memory_manager

THINKING_ENABLED = bool(int(os.getenv("THINKING_ENABLED", "1")))
SEARCH_ENABLED = bool(int(os.getenv("SEARCH_ENABLED", "1")))
MAX_STEPS = int(os.getenv("REASONING_MAX_STEPS", "3"))

SYSTEM_PROMPT_AGENT = (
    "–¢–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç. –Ø–∫—â–æ –±—Ä–∞–∫—É—î —Ñ–∞–∫—Ç—ñ–≤ –∞–±–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è ‚Äî "
    "–∫–æ—Ä–∏—Å—Ç—É–π—Å—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ search_web —Ç–∞ fetch_page. "
    "–ù–µ —Ä–æ–∑–∫—Ä–∏–≤–∞–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∫—Ä–æ–∫–∏; –ø–æ—è—Å–Ω—é–π –≤–∏—Å–Ω–æ–≤–∫–∏ –ª–∞–∫–æ–Ω—ñ—á–Ω–æ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –¥–∂–µ—Ä–µ–ª–∞ (–Ω–∞–∑–≤–∞/–¥–æ–º–µ–Ω)."
)

def _should_use_agent(user_text: str) -> bool:
    """
    –°—Ç—Ä–æ–≥—ñ —Ç—Ä–∏–≥–µ—Ä–∏, —è–∫—â–æ THINKING_STRICT=1:
    - —è–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /think
    - —è–≤–Ω—ñ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –ø—Ä–æ –≤–µ–±-–ø–æ—à—É–∫/–∞–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å
    –Ø–∫—â–æ THINKING_STRICT=0 ‚Äî –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ –º‚Äô—è–∫—à–∞ (—è–∫ —Ä–∞–Ω—ñ—à–µ).
    """
    strict = bool(int(os.getenv("THINKING_STRICT", "1")))
    t = (user_text or "").strip().lower()

    hard_triggers = [
        "/think",
        "–ø–æ—à—É–∫–∞–π",
        "–∑–Ω–∞–π–¥–∏ –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ",
        "–ø–µ—Ä–µ–≤—ñ—Ä –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ",
        "—â–æ –Ω–æ–≤–æ–≥–æ",
        "–Ω–æ–≤–∏–Ω–∏",
    ]
    if any(k in t for k in hard_triggers):
        return True

    if strict:
        return False  # —Ç—ñ–ª—å–∫–∏ —è–≤–Ω—ñ —Ç—Ä–∏–≥–µ—Ä–∏

    return bool(int(os.getenv("THINKING_ENABLED", "1")))

def _needs_reasoning(user_text: str) -> bool:
    """
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ reasoning (gpt-5) —Ç—ñ–ª—å–∫–∏ —è–≤–Ω–∏–º —á–∏–Ω–æ–º:
    - /think –Ω–∞ –ø–æ—á–∞—Ç–∫—É
    - –∞–±–æ —î –µ–º–æ–¥–∑—ñ/—Å–ª–æ–≤–∞: 'üß†', '—Ä–æ–∑–¥—É–º–∞–π', 'step-by-step'
    """
    t = (user_text or "").strip().lower()
    return t.startswith("/think") or ("üß†" in user_text) or ("—Ä–æ–∑–¥—É–º–∞–π" in t) or ("step-by-step" in t)

async def run_agent(chat_id: int, user_text: str) -> str:
    # 0) –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è: —è–∫—â–æ —î /think ‚Äî –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å —ñ–∑ —Ç–µ–∫—Å—Ç—É
    raw = user_text or ""
    tnorm = raw.strip()
    if tnorm.lower().startswith("/think"):
        parts = tnorm.split(None, 1)
        user_text = parts[1] if len(parts) > 1 else ""
    else:
        user_text = tnorm

    # 1) –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º'—è—Ç—ñ (–±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ, –≤—ñ–Ω –Ω–∏–∂—á–µ):
    ctx = await memory_manager.select_context(chat_id=chat_id, user_query=user_text, system_prompt=None)

    # 2) —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω reasoning (gpt-5)?
    use_reasoning = _needs_reasoning(tnorm)

    # 3) –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫ –∑ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    messages = make_messages(SYSTEM_PROMPT_AGENT, ctx, user_text)
    tools = tool_spec()
    used_sources: list[dict] = []

    resp = chat_once(messages, tools=tools, use_reasoning=use_reasoning)
    step = 0
    while step < MAX_STEPS:
        step += 1
        choice = resp.choices[0]
        msg = choice.message
        if not msg.tool_calls:
            answer = (msg.content or "").strip()
            if used_sources:
                uniq = []
                seen = set()
                for s in used_sources:
                    dom = s.get("url","")
                    try:
                        import urllib.parse
                        dom = urllib.parse.urlparse(dom).netloc or dom
                    except Exception:
                        pass
                    key = (dom, s.get("title",""))
                    if key in seen:
                        continue
                    seen.add(key)
                    uniq.append(f"- {s.get('title') or dom} ({dom})")
                if uniq:
                    answer += "\n\n–î–∂–µ—Ä–µ–ª–∞:\n" + "\n".join(uniq[:5])
            return answer
        for tc in msg.tool_calls:
            name = tc.function.name
            try:
                args = json.loads(tc.function.arguments or "{}")
            except Exception:
                args = {}
            result_str = ""
            if name == "search_web" and SEARCH_ENABLED:
                res = await search_web(args.get("query",""), args.get("max_results"), args.get("recency_days"))
                for r in res:
                    used_sources.append(r)
                result_str = json.dumps(res, ensure_ascii=False)
            elif name == "fetch_page" and SEARCH_ENABLED:
                url = args.get("url","")
                text = await fetch_page(url)
                result_str = text
            else:
                result_str = f"TOOL_ERROR: unknown or disabled tool {name}"
            messages.append({
                "role": "tool",
                "tool_call_id": tc.id,
                "name": name,
                "content": result_str[:20000],
            })
        resp = chat_once(messages, tools=tools, use_reasoning=use_reasoning)
    final = resp.choices[0].message.content or "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –º—ñ—Ä–∫—É–≤–∞–Ω–Ω—è. –î–∞–π –º–µ–Ω—ñ —â–µ –ø—ñ–¥–∫–∞–∑–∫—É."
    return final.strip()

async def run_simple(chat_id: int, user_text: str) -> str:
    ctx = await memory_manager.select_context(chat_id=chat_id, user_query=user_text, system_prompt=None)
    messages = make_messages("–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç.", ctx, user_text)
    resp = chat_once(messages, tools=None, use_reasoning=False)
    return (resp.choices[0].message.content or "").strip()
